
Hey Lucas,

When developing code you should make it a high priority to keep your code as readible as possible - by using well named variables & functions, using concise & accurate comments, proper spacing & code formatting, by avoiding global variables, adhering to the "principle of least astonishment", and by keeping your logic the least complicated as possible. Most of the cost of software engineering projects is in maintaining the code, not in the initial development. So if you find yourself being a software dev engineer one day, you'll most certainly have test & QA engineers scrutinize and debug your code (or vise versa). It is imparitive that you don't waste other people's time whom might struggle to read your code since it will certainly cost your company money, and if continued can cost you your job. I really only mean to help, as my suggestions are based upon real experience.

Your code is functionally correct, but here are some specifics you could have used to increase readibility in your code: your 1st comment is wrong & limiting -> getchar() grabs bytes from stdin, not a file... your 2nd comment is unneeded, simply site these things in your README next time... there are no useful comments, short comments could have been used around some of your logic to decrease code complexity and increase readibility... your SINGLE printf() at the bottom is a mess and very unreadible, decompose this into several printf()'s next time...

Great efficiency using an int[] and a single forloop for initializing/printing digit results.


PROJECT GRADE BREAKDOWN:
========================
grader (PASS/FAIL) -> 50/50
code quality -> 35/40
readme -> 10/10

Cheers,
Joey.
